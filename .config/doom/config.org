#+TITLE: My configuration

* Introduction
This is my literate configuration for doom emacs. I barley know elisp and I have
mostly stolen snippets for others.

Lets get this config started!
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC
* Rudimentary configuration
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jeetaditya Chatterjee"
      user-mail-address "jeetelongname@gmail.com"
      doom-theme 'doom-horizon; pretty self explanitory
      auth-sources '("~/.authinfo.gpg")
      ispell-dictionary "en"
      browse-url-browser-function 'browse-url-firefox)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq fancy-splash-image (concat doom-private-dir "icons/emacs-icon.png"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative
      company-idle-delay 0.3 ; I like my autocomplete like my tea fast and always
      prettify-symbols-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec
       :family "Inconsolata NF"
       :size 15)
      doom-big-font (font-spec
       :family "Inconsolata NF"
       :size 25)
      doom-variable-pitch-font (font-spec
       :family "Inconsolata NF"
       :size 15))
#+END_SRC

* Packages

A nice little header
#+BEGIN_SRC emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+END_SRC
** Package Loading
I have some packages I have installed
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! emacs-easy-hugo
  :recipe (:host github
           :repo "masasam/emacs-easy-hugo"
           :files ("*el")))

(package! discord-emacs
  :recipe (:host github
           :repo "nitros12/discord-emacs.el"
           :files ("*.el")))

(package! elfeed-goodies)
(package! elfeed-web)

(package! peep-dired)
(package! tldr)
(package! org-msg)

(package! origami)
;; (package! org-super-agenda)
(package! emojify)
(package! selectric-mode)
#+END_SRC

** Configuration
these are not really modules but I have put them here anyway
*** Discord emacs
I use discord emacs over elcord .. well because I found it first this is pretty
much all that is needed for it to work and you can use the default client id to
get it working right away or if you want to roll your own .you can add assets by
calling them the file extension (go for golang py for python org for .. well you
know)

#+BEGIN_SRC emacs-lisp
(use-package! discord-emacs ;; for face value discord intergration
  :config
  ;; (discord-emacs-run "747913611426529440") ;;mine
  (discord-emacs-run "384815451978334208") ;;default
  )
#+END_SRC
*** Peep Dired
*** Easy-hugo
#+BEGIN_SRC emacs-lisp
;; (setq easy-hugo-basedir "~/code/git-repos/mine/jeetelongname.github.io/blog-hugo/")
(setq easy-hugo-root "~/code/git-repos/mine/jeetelongname.github.io/blog-hugo/")
#+END_SRC

* Modules
** completion
*** company
*** ivy
#+BEGIN_SRC emacs-lisp


#+END_SRC
** lang
*** Org
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org-notes/")
(after! org
  (set-face-attribute 'org-link nil
                      :weight 'normal
                      :background nil)
  (set-face-attribute 'org-code nil
                      :background nil)
  (set-face-attribute 'org-date nil
                      :foreground "#5b6268"
                      :background nil)
  (set-face-attribute 'org-level-1 nil
                      :background nil
                      :height 1.2
                      :weight 'normal)
  (set-face-attribute 'org-level-2 nil
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-3 nil
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-4 nil
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-5 nil
                      :weight 'normal)
  (set-face-attribute 'org-level-6 nil
                      :weight 'normal)
  (set-face-attribute 'org-document-title nil
                      :background nil
                      :height 1.75
                      :weight 'bold)
  (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")
        org-superstar-headline-bullets-list '("⁕" "܅" "⁖" "⁘" "⁙" "⁜")))
  #+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '( ("x" "Note" entry  (file+olp+datetree "journal.org")
          "**** %T %?" :prepend t :kill-buffer t)
         ("t" "Task" entry (file+headline "tasks.org" "Inbox")
          "**** TODO %U %?\n%i" :prepend t :kill-buffer t)))
#+END_SRC
*** Go
#+BEGIN_SRC emacs-lisp

(after! go-mode
  (set-ligatures! 'go-mode
    :def "func"
    :true "true" :false "false"
    :int "int" :str "string"
    :float "float" :bool "bool"
    :for "for"
    :return "return" :yeild "yeild"))

#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
(setq! +python-ipython-command '("ipython3" "-i" "--simple-prompt" "--no-color-info"))
#+END_SRC

** ui
*** Modeline
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-root
      doom-modeline-height 3
      doom-modeline-icon 't
      doom-modeline-modal-icon 'nil
      doom-modeline-env-version t
      doom-modeline-major-mode-color-icon t
      doom-modeline-buffer-modification-icon t
      doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)
      doom-modeline-icon(display-graphic-p)
      doom-modeline-persp-name t
      doom-modeline-persp-icon t))
#+END_SRC

I stole this from @tecosaur Its frankly a great addition (this is a theme a
theme throughout @tecosaurs config)
#+BEGIN_SRC emacs-lisp

(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

#+END_SRC
*** Tabs
#+BEGIN_SRC emacs-lisp
(after! centaur-tabs
    (setq centaur-tabs-style "box"
      centaur-tabs-height 40
      centaur-tabs-set-bar 'under
      x-underline-at-descent-line t
      centaur-tabs-close-button "×"
      centaur-tabs-modified-marker "Ø"))
#+END_SRC
*** Treemacs
#+BEGIN_SRC emacs-lisp
(setq +treemacs-git-mode 'extended
      treemacs-width 30)
#+END_SRC
** email
*** mu4e
#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq +mu4e-backend 'offlineimap
        mail-user-agent 'mu4e-user-agent)
  (setq mu4e-use-fancy-chars t
        mu4e-headers-draft-mark '("D" . " ")
        mu4e-headers-flagged-mark '("F" . " ")
        mu4e-headers-new-mark '("N" . " ")
        mu4e-headers-passed-mark '("P" . " ")
        mu4e-headers-replied-mark '("R" . " ")
        mu4e-headers-seen-mark '("S" . " ")
        mu4e-headers-trashed-mark '("T" . " ")
        mu4e-headers-attach-mark '("a" . " ")
        mu4e-headers-encrypted-mark '("x" . "")
        mu4e-headers-signed-mark '("s" . " ")
        mu4e-headers-unread-mark '("u" . " "))
        (setq mu4e-headers-fields '((:human-date . 12)
                                    (:flags . 4)
                                    (:from . 25)
                                    (:subject))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(set-email-account! "gmail.com"
                    '((mu4e-sent-folder       . "/gmail.com/Sent Mail")
                      (mu4e-drafts-folder     . "/gmail.com/Drafts")
                      (mu4e-trash-folder      . "/gmail.com/Trash")
                      (mu4e-refile-folder     . "/gmail.com/All Mail")
                      (smtpmail-smtp-user     . "jeetelongname@gmail.com")
                      (user-mail-address      . "jeetelongname@gmail.com")
                      (mu4e-compose-signature . " Regards, #+begin_signature -- *Jeetaditya Chatterjee* \\\\ /Sent using my text editor/ #+end_signature"))t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(map! :localleader ; HACK ; works but is now in all org buffers
      :map org-mode-map :prefix "m"
      :desc "send and exit" "s" #'message-send-and-exit
      :desc "kill buffer"   "d" #'message-kill-buffer
      :desc "save draft"    "S" #'message-dont-send
      :desc "attach"        "a" #'mail-add-attachment)
#+END_SRC
**** org-msg
#+BEGIN_SRC emacs-lisp
(use-package! org-msg
  :config
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt "\nHi *%s*,\n\n"
        org-msg-greeting-name-limit 3
        org-msg-text-plain-alternative t
        org-msg-signature "
 Regards,

 #+begin_signature
 -- *Jeetaditya Chatterjee* \\\\
 /Sent using my text editor/
 #+end_signature")
 (org-msg-mode))
#+END_SRC
** App
*** rss
#+BEGIN_SRC emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@1-week-ago")
  (setq rmh-elfeed-org-files (list (concat org-directory "elfeed.org"))) ;; +org
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package! elfeed-goodies
  :config
  (elfeed-goodies/setup))
#+END_SRC
* Other Stuff??
** Keybinds
These are my general keybinds (should probably split them up)
#+BEGIN_SRC emacs-lisp
(map!
 :n "zw" 'save-buffer ; = :w ZZ = :wq
 :leader
  :desc "Enable Coloured Values""t c" #'rainbow-mode
  :desc "Toggle Tabs""t B" #'centaur-tabs-local-mode
  :desc "Open Elfeed""o l" #'elfeed

  (:after dired (:map dired-mode-map
        :n "j" #'peep-dired-next-file
        :n "k" #'peep-dired-prev-file
        :localleader
        "p" #'peep-dired))

  (:after spell-fu (:map override ;; HACK spell-fu does not define a modemap
        :n [return]
        (cmds! (memq 'spell-fu-incorrect-face (face-at-point nil t))
             #'+spell/correct))))
#+END_SRC

** Hooky hooks
#+BEGIN_SRC emacs-lisp
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(remove-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'text-mode-hook #'auto-fill-mode)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC
